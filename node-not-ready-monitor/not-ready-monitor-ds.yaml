apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: not-ready-monitor
  namespace: not-ready-monitor
  labels:
    k8s-app: not-ready-monitor
spec:
  selector:
    matchLabels:
      name: not-ready-monitor
  template:
    metadata:
      labels:
        name: not-ready-monitor
    spec:
      tolerations:
      # - key: node-role.kubernetes.io/master
      #  effect: NoSchedule
      hostIPC: true
      hostNetwork: true
      hostPID: true
      containers:
      - name: not-ready-monitor
        securityContext:
          privileged: true
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        image: fedora
        command:
        - /bin/bash
        - /entrypoint-scripts/entrypoint.sh
        volumeMounts:
        - name: entrypoint-scripts
          mountPath: /entrypoint-scripts
        - name: hostfs
          mountPath: /host
        - name: run
          mountPath: /run
        - name: machineid
          mountPath: /etc/machine-id
      terminationGracePeriodSeconds: 30
      volumes:
      - name: entrypoint-scripts
        configMap:
          name: entrypoint-scripts
      - name: hostfs
        hostPath:
          path: /
      - name: run
        hostPath:
          path: /run/
          type: Directory
      - name: machineid
        hostPath:
          path: /etc/machine-id
          type: File

---
apiVersion: v1
data:
  entrypoint.sh: |
    #!/bin/bash
    OUTDIR=/host/var/tmp
    MONITOR_INTERVAL_SEC=5
    MIN_GATHER_INTERVAL_MIN=60
    LOCK_FILE=${OUT_DIR}/node-not-ready-monitor.lock
    MIN_AVAILABLE_GB=500
    echo "All dependencies are ready."
    echo "Silently monitoring from now on every ${MONITOR_INTERVAL_SEC} seconds ..."
    while true; do
        kubelet_status=$(oc get nodes ${NODE_NAME} -o json | jq '.status.conditions[] |  select(.reason == "KubeletReady") .status' | sed 's/"//g')
        if [ "$kubelet_status" != "True" ]; then
                echo "Kubelet is down"
                
                if test "`find ${LOCK_FILE} -mmin +${MIN_GATHER_INTERVAL_MIN}`"; then
                    echo "${LOCK_FILE} is older than ${MIN_GATHER_INTERVAL_MIN}. Removing ..." 
                    rm -f ${LOCK_FILE}
                fi

                if [ -f ${LOCK_FILE} ] ; then
                    echo "Lock file ${LOCK_FILE} detected, skipping data collection."
                else
                    available=$(df ${OUTDIR} | tail -n+2 | awk '{print $4}')
                    available_gb=$(echo "$available / 1024 / 1024" | bc)
                    if  [ "$available_gb" -lt "$MIN_AVAILABLE_GB" ]; then
                        echo "Not enough disk space to generate a data capture"
                    else
                        touch ${LOCK_FILE}
                        echo "Generating sosreport"
                        sosreport --batch  -k crio.all=on -k crio.logs=on --sysroot /host --all-logs | tee /tmp/log.txt
                        # tmp_sosreport_file=$(grep 'tar.xz' /tmp/log.txt  | awk '{print $1}')
                        # sosreport_basename=$(basename $tmp_sosreport_file)
                        # echo "Moving file $tmp_sosreport_file to /host/var/tmp/$sosreport_basename"
                        # mv $tmp_sosreport_file /host/var/tmp/$sosreport_basename

                        echo "Capturing /var/log/journal"
                        tar -czf ${OUTDIR}/journal.${NODE_NAME}.$(date +%s).tar.gz /host/var/log/journal
                        # echo "Capturing /var/log/containers"
                        # tar -czhf /host/var/tmp/containers.${NODE_NAME}.$(date +%s).tar.gz /host/var/log/containers
                        echo "Capturing /var/log/pods"
                        tar -czhf ${OUTDIR}/pods.${NODE_NAME}.$(date +%s).tar.gz /host/var/log/containers
                    fi
                fi

                echo "Restarting kubelet"
                # the following works when hostIPD, hostPID, hostNetwork are true
                # chroot /host systemctl restart kubelet
                # otherwise this here always works with /host mounted
                # From https://github.com/openshift/cluster-network-operator/pull/785/commits/3093fbf87347580c4366d8508b2524630ba1b66a
                chroot /host \
                  gdbus call \
                  --system \
                  --dest org.freedesktop.systemd1 \
                  --object-path /org/freedesktop/systemd1/unit/kubelet_2eservice \
                  --method org.freedesktop.systemd1.Unit.Restart "replace"
                echo "Exiting"
                exit 0
        fi 
        sleep $MONITOR_INTERVAL_SEC
        echo -n "."
    done
kind: ConfigMap
metadata:
  name: entrypoint-scripts
